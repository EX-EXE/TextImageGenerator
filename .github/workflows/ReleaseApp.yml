name: Release App

on:
  workflow_dispatch:
    inputs:
      version:
        description: "version(ex. 1.0.0)"
        required: true
        default: "0.0.0"
      release:
        description: "release"
        required: true
        default: "false"

env:
  VERSION: ${{ github.event.inputs.version }}
  RELEASE: ${{ github.event.inputs.release }}
  PUBLISH_DIR: "/tmp/publish/"
  APP_NAME: "TextImageGenerator"
  ASSEMBLY_NAME: "TextImageGenerator.App"

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: "windows-latest"
            runtime: "win-x64"
            publish: TextImageGenerator.App.exe
            upload: TextImageGenerator.App.win-x64.exe
          - platform: "macos-latest"
            runtime: "osx-x64"
            publish: TextImageGenerator.App
            upload: TextImageGenerator.App.osx-x64
          - platform: "ubuntu-latest"
            runtime: "linux-x64"
            publish: TextImageGenerator.App
            upload: TextImageGenerator.App.linux-x64
    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore
      run: dotnet restore
      
    - name: Publish
      run: dotnet publish ./src/${{ env.ASSEMBLY_NAME }}/ -c release --self-contained -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishTrimmed=true -p:Version=${{ env.VERSION }} -r ${{ matrix.runtime }} -o ${{ env.PUBLISH_DIR }}${{ matrix.runtime }}/
      
    - name: Display Publish Directory
      run: |
           ls ${{ env.PUBLISH_DIR }}${{ matrix.runtime }}/ 
           
    - name: Rename
      run: |
           mv ${{ env.PUBLISH_DIR }}${{ matrix.runtime }}/${{ matrix.publish }} ${{ env.PUBLISH_DIR }}${{ matrix.runtime }}/${{ matrix.upload }}

    - name: Upload
      uses: actions/upload-artifact@v3
      with:
          name: PublishFiles
          path: ${{ env.PUBLISH_DIR }}${{ matrix.runtime }}/${{ matrix.upload }}
           

  release:
    if: github.event.inputs.release == 'true'
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Create GitTag
        run: git tag Release/${{ env.VERSION }}
        
      - name: Push GitTag
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true
          
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Release/${{ env.VERSION }}
          release_name: TextImageGenerator Ver.${{ env.VERSION }}
          draft: true
          prerelease: false
          
      - name: Download Release Asset
        uses: actions/download-artifact@v3
        id: download_asset
        with:
          name: ${{ env.RUNTIME }}
          path: /tmp/release/${{ env.RUNTIME }}/ 

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.download_asset.outputs.download-path }}/TextImageGenerator.App.exe
          asset_name: TextImageGenerator.exe
          asset_content_type: application/octet-stream

#      - name: Zip Release Asset
#        id: zip-release-asset 
#        run: |
#           cd /tmp/release/ 
#           zip -rv /tmp/release/${{ env.RUNTIME }}.zip ${{ env.RUNTIME }}
#          
#      - name: Upload Release Asset
#        id: upload-release-asset 
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: /tmp/release/${{ env.RUNTIME }}.zip
#          asset_name: win-x64.zip
#          asset_content_type: application/zip
      
